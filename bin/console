#!/usr/bin/env ruby
# frozen_string_literal: true

require 'webrick'
require 'pry'
require_relative '../lib/redd'

USER_AGENT = "Ruby:Redd-Quickstart:v#{Redd::VERSION} (by /u/Mustermind)"

# The REPL session to initialize Pry in.
class Reddit
  attr_accessor :session
end
reddit = Reddit.new

redd_file_path = File.join(Dir.home, '.redd.key')
if File.exist?(redd_file_path)
  auth = Redd::AuthStrategies::Web.new(
    client_id: 'P4txR-D6TzF8cg',
    redirect_uri: 'http://localhost:8000/redirect'
  )
  access = Redd::Models::Access.new(refresh_token: File.read(redd_file_path))
  client = Redd::APIClient.new(auth, user_agent: USER_AGENT)
  client.access = auth.refresh(access)
  reddit.session = Redd::Models::Session.new(client)
else
  server = WEBrick::HTTPServer.new(
    Port: 8000,
    BindAddress: '0.0.0.0',
    Logger: WEBrick::Log.new(File.open(File::NULL, 'w')),
    AccessLog: []
  )

  server.mount_proc '/' do |_, res|
    res.body = <<-HTML
      <!doctype html>
      <title>Redd Quickstart</title>
      <style>
        html, body { margin: 0; height: 100vh; }
        .wrapper { padding-top: 30vh; text-align: center; font-family: sans-serif; }
        #btn { background-color: #3D9970; margin: 5px; border-radius: 5px; padding: 10px; color: #fff; text-decoration: none; }
      </style>
      <div class="wrapper">
        <h1>redd // quickstart</h1>
        <a href="/authenticate" target="_blank" id="btn">Start</a>
        <span>a new session in your terminal?</span>
      </div>
    HTML
  end

  server.mount_proc '/authenticate' do |_, res|
    res.set_redirect(
      WEBrick::HTTPStatus[302],
      Redd.url(
        client_id: 'P4txR-D6TzF8cg',
        response_type: 'code',
        state: '0',
        redirect_uri: 'http://localhost:8000/redirect',
        duration: 'permanent',
        scope: %w[account creddits edit flair history identity livemanage modconfig modcontributors
                  modflair modlog modmail modothers modposts modself modwiki mysubreddits
                  privatemessages read report save submit subscribe vote wikiedit wikiread]
      )
    )
  end

  server.mount_proc '/redirect' do |req, res|
    err = req.query['error']
    should_exit = err.nil? || err == 'access_denied'
    res.body = <<-HTML
      <!doctype html>
      <title>Done!</title>
      #{should_exit ? '<script>window.close();</script>' : "<p>Uh oh, there was an error: #{err}</p>"}
    HTML

    unless err
      server.stop
      reddit.session = Redd.it(
        user_agent: "Ruby:Redd-Quickstart:v#{Redd::VERSION} (by /u/Mustermind)",
        client_id: 'P4txR-D6TzF8cg',
        redirect_uri: 'http://localhost:8000/redirect',
        code: req.query['code'],
        auto_refresh: true
      )
      File.open(redd_file_path, 'w') do |f|
        f.write(reddit.session.client.access.refresh_token)
      end
    end
  end

  # Get the server going and shut it all down if user hits Ctrl-C
  begin
    puts "Listening at \e[34mhttp://localhost:8000\e[0m..."
    server.start
  rescue Interrupt
    server.shutdown
    exit
  end
end

reddit.instance_exec do
  # Post a colourful welcome message
  suggestions = [
    # Session#me
    'session.me.link_karma',
    # Subreddit listings
    "session.subreddit('pics').hot.first.title",
    # User listings
    'puts session.me.comments(sort: :top).first.body',
    # Sending messages
    "session.user('Mustermind').send_message(subject: 'Hi!', text: 'How are you?')",
    # Subscribing to subreddits
    "session.subreddit('EarthPorn').subscribe",
    # Upvoting
    'session.front_page.hot(time: :month).first.upvote',
    # Add friend
    "session.user('Mustermind').friend",
    # List friends
    'session.friends.each { |friend| puts friend.name };',
    # Hiding / Duplicates
    'session.front_page.hot.each { |l| l.hide if l.duplicates.count > 2 }'
  ]
  puts "Hi \e[35m/u/#{session.me.name}\e[0m! Try `\e[34m#{suggestions.sample}\e[0m`."

  # Load Pry
  Pry.start(self)
end
